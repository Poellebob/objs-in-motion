[gd_scene load_steps=5 format=3 uid="uid://b1258n1kpye8h"]

[ext_resource type="PackedScene" uid="uid://52advj25csr4" path="res://ui.tscn" id="1_ig7tw"]
[ext_resource type="PackedScene" uid="uid://ckomt6lcrb0bw" path="res://ball.tscn" id="2_0xm2m"]
[ext_resource type="PackedScene" uid="uid://dfwqtl62dpqh7" path="res://axis_display.tscn" id="2_h2yge"]

[sub_resource type="GDScript" id="GDScript_7dm0k"]
script/source = "extends Node2D

@onready var ui: CanvasLayer = $CanvasLayer
@onready var camera: Camera2D = $\"Axis display/Camera2D\"
@onready var floor_texture: ColorRect = $ParallaxBackground/ParallaxLayer/Node2D/ColorRect
@onready var floor_layer: ParallaxLayer = $ParallaxBackground/ParallaxLayer
@onready var ball: Node2D = $Ball
@onready var path_line: Line2D = $Line2D

var path: Dictionary = {\"vx\":[], \"vy\": [], \"x\": [0], \"y\": [0]}
var prefix_def: Dictionary = {
	\"C_w\": 0.71,
	\"m\": 2.74,
	\"A\": 0.0012566,
	\"p_luft\": 1.289,
}
var prefix: Dictionary
var D: float

const delta_time: float = 0.001
const gravity: float = 9.82
var velosity0: float
var angle0: float #in radians
var x0: float
var y0: float
var endx : float

var previous_mouse_position: Vector2
var play_prog: float = 0

func _ready() -> void:
	ui.visible = true
	$ParallaxBackground.visible = true
	
	velosity0 = ui.velosity0
	angle0 = ui.angle0
	
	prefix = prefix_def
	D = prefix[\"p_luft\"]*prefix[\"C_w\"]*prefix[\"A\"]/2
	path[\"vx\"].append(velosity0 * cos(angle0))
	path[\"vy\"].append(velosity0 * sin(angle0))
	
	_update_path()


func _physics_process(delta: float) -> void:
	# sets the progrss bar to the corret lenth
	# witch after being set updates ther ball's pos automaticly
	if(ui.playing):
		play_prog += 1000.0*delta
		
		if(play_prog < len(path[\"x\"])):
			ui.set_progress(play_prog/(len(path[\"x\"])-1)*100)
		else:
			ui.set_progress(100)
			play_prog = 0
			ui.playing = false


func _process(_delta: float):
	var current_mouse_position = get_viewport().get_mouse_position()
	if(Input.is_action_pressed(\"mouse_left\") and ui.controll_free):
		var mouse_movement = current_mouse_position - previous_mouse_position
		camera.position -= mouse_movement / camera.zoom
	previous_mouse_position = current_mouse_position
	
	#TODO zoom to mouse
	var zoom_input = int(Input.is_action_just_pressed(\"mouse_up\")) - int(Input.is_action_just_pressed(\"mouse_down\"))
	if zoom_input != 0:
	#	var old_zoom = camera.zoom
		camera.zoom += Vector2.ONE * 0.1 * zoom_input
		camera.zoom = camera.zoom.clamp(Vector2.ONE * 0.2, Vector2.ONE * 15)
	#	
	#	current_mouse_position = get_viewport().get_mouse_position()
	#	var zoom_factor = (Vector2.ONE / old_zoom) - (Vector2.ONE / camera.zoom)
	#	camera.position += (current_mouse_position - Vector2(get_viewport().size) / 2 + camera.position) / camera.zoom * zoom_factor
	
	if camera.position.y > 0:
		camera.position.y = 0
	
	floor_texture.size = Vector2(get_viewport().size) / camera.zoom
	floor_layer.motion_mirroring.x = floor_texture.size.x




func _new_prefix(index: int) -> void:
	_update_path(\"\", ui.input_type)
	_time_changed(0)


func _edit_vel0(vel: float) -> void:
	velosity0 = vel
	_update_path(\"\", ui.input_type)
	_time_changed(0)


func _edit_angle0(angle: float) -> void:
	angle0 = angle
	_update_path(\"\", ui.input_type)
	_time_changed(0)


func _edit_x0(x: float) -> void:
	x0 = x
	_update_path(\"\", ui.input_type)
	_time_changed(0)


func _edit_y0(y: float) -> void:
	y0 = y
	_update_path(\"\", ui.input_type)
	_time_changed(0)


func _edit_xend(xend: float) -> void:
	endx = xend
	_update_path(\"\", ui.input_type)
	_time_changed(0)



func _time_changed(progress: float) -> void:
	var slice: float = (len(path[\"x\"])-1)/100.0*progress
	ball.position.x = path[\"x\"][slice]*100
	ball.position.y = -path[\"y\"][slice]*100
	
	ui.set_ball_display(
		snapped(path[\"x\"][slice], 0.1), 
		snapped(path[\"y\"][slice], 0.1), 
		snapped(path[\"vx\"][slice], 0.1), 
		snapped(path[\"vy\"][slice], 0.1)
	)
	
	play_prog = slice


func _update_path(pfx_path = \"\", mode: int = 0):
	if mode == 1:
		_end_point_cal()
		return
	
	path_line.clear_points()
	
	if pfx_path:
		var prefix = FileAccess.open(pfx_path, FileAccess.READ)
		# TODO: Load other prefixes if needed
	
	# Reset path with initial conditions
	path = {\"vx\": [], \"vy\": [], \"x\": [], \"y\": []}
	
	# Set initial values using x0 and y0
	path[\"vx\"].append(velosity0 * cos(angle0))
	path[\"vy\"].append(velosity0 * sin(angle0))
	path[\"x\"].append(x0)  # Use x0 instead of 0
	path[\"y\"].append(y0)  # Use y0 instead of 0
	path_line.add_point(Vector2(x0*100, -y0*100))
	
	while path[\"y\"][-1] >= 0:
		var last = len(path[\"x\"]) - 1  # Get last index
		
		var mass = prefix[\"m\"] / 1000
		
		# Compute velocity magnitude
		var v_mag = sqrt(pow(path[\"vx\"][last], 2) + pow(path[\"vy\"][last], 2))
		
		# Compute air resistance components
		var ax = -D * v_mag * path[\"vx\"][last] / mass
		var ay = -gravity - (D * v_mag * path[\"vy\"][last] / mass)
		
		# Update velocities
		var new_vx = path[\"vx\"][last] + ax * delta_time
		var new_vy = path[\"vy\"][last] + ay * delta_time
		
		# Update positions
		var new_x = path[\"x\"][last] + path[\"vx\"][last] * delta_time
		var new_y = path[\"y\"][last] + path[\"vy\"][last] * delta_time
		
		# Append new values to path
		path[\"x\"].append(new_x)
		path[\"y\"].append(new_y)
		path[\"vx\"].append(new_vx)
		path[\"vy\"].append(new_vy)
		path_line.add_point(Vector2(new_x*100, -new_y*100))


func _end_point_cal():
	var v_min: float = 0.0
	var v_max: float = 54.1666667 # based on a google search
	var tolerance: float = 0.005
	
	velosity0 = v_max
	_update_path()
	
	ui.info_lable.text = \"the ball can not fly longer then \" + str(path[\"x\"][len(path[\"x\"]) - 1]) + \"m\"
	var searching = true
	if endx > path[\"x\"][len(path[\"x\"]) - 1]:
		searching = false
	
	while searching:
		var v_mid = (v_min + v_max) / 2.0
		velosity0 = v_mid
		_update_path()  # Uses global variables like velosity0, angle0, x0, y0
		
		var last = path[\"x\"].size() - 1
		var final_x = path[\"x\"][last]
		var error = abs(final_x - endx)
		
		if error <= tolerance:
			print(\"Found velocity: \", v_mid, \" with error: \", error)
			searching = false
			return
		elif final_x < endx:
			v_min = v_mid
		else:
			v_max = v_mid
"

[node name="main" type="Node2D"]
script = SubResource("GDScript_7dm0k")

[node name="CanvasLayer" parent="." instance=ExtResource("1_ig7tw")]
visible = false

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
visible = false

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="Node2D" type="Node2D" parent="ParallaxBackground/ParallaxLayer"]

[node name="ColorRect" type="ColorRect" parent="ParallaxBackground/ParallaxLayer/Node2D"]
offset_top = 8.0
offset_right = 1.0
offset_bottom = 9.0
color = Color(0.293192, 0.631032, 0.0277666, 1)

[node name="Axis display" parent="." instance=ExtResource("2_h2yge")]

[node name="Camera2D" type="Camera2D" parent="Axis display"]
position = Vector2(225, 0)

[node name="Line2D" type="Line2D" parent="."]
width = 2.75
default_color = Color(0.910236, 0, 0.107668, 1)

[node name="Ball" parent="." instance=ExtResource("2_0xm2m")]

[connection signal="angle0_change" from="CanvasLayer" to="." method="_edit_angle0"]
[connection signal="time_changed" from="CanvasLayer" to="." method="_time_changed"]
[connection signal="velocity0_change" from="CanvasLayer" to="." method="_edit_vel0"]
[connection signal="x0_change" from="CanvasLayer" to="." method="_edit_x0"]
[connection signal="xend_change" from="CanvasLayer" to="." method="_edit_xend"]
[connection signal="y0_change" from="CanvasLayer" to="." method="_edit_y0"]
